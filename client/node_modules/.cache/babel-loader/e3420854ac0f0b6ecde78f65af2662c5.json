{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"/api/users/register\", userData).then(res => history.push(\"/login\")) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"/api/users/login\", userData).then(res => {\n    const token = res.data.token; // Save to localStorage\n\n    localStorage.setItem(\"jwtToken\", token); // Set token to localStorage\n\n    setAuthToken(token); // Set token to Auth header\n\n    const decoded = jwt_decode(token); // Decode token to get user data\n\n    dispatch(setCurrentUser(decoded)); // Set current user\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  localStorage.removeItem(\"jwtToken\"); // Remove token from local storage\n\n  setAuthToken(false); // Remove auth header for future requests\n\n  dispatch(setCurrentUser({})); // Set current user to empty object {} which will set isAuthenticated to false\n};","map":{"version":3,"sources":["/home/jasonw/Desktop/React/bugtracker/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SACIC,UADJ,EAEIC,gBAFJ,EAGIC,YAHJ,QAIO,SAJP,C,CAKA;;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC3DT,EAAAA,KAAK,CACAU,IADL,CACU,qBADV,EACiCH,QADjC,EAEKI,IAFL,CAEUC,GAAG,IAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAFjB,EAEyC;AAFzC,GAGKC,KAHL,CAGWC,GAAG,IACVN,QAAQ,CAAC;AACLO,IAAAA,IAAI,EAAEb,UADD;AAELc,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFjB,GAAD,CAJZ;AASH,CAVM,C,CAWP;;AACA,OAAO,MAAMC,SAAS,GAAGb,QAAQ,IAAIE,QAAQ,IAAI;AAC7CT,EAAAA,KAAK,CACAU,IADL,CACU,kBADV,EAC8BH,QAD9B,EAEKI,IAFL,CAEUC,GAAG,IAAI;AAAA,UAEDS,KAFC,GAEST,GAAG,CAACO,IAFb,CAEDE,KAFC,EAE+B;;AACxCC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAHS,CAGmC;;AAE5CpB,IAAAA,YAAY,CAACoB,KAAD,CAAZ,CALS,CAKmB;;AAE5B,UAAMG,OAAO,GAAGtB,UAAU,CAACmB,KAAD,CAA1B,CAPS,CAO2B;;AAEpCZ,IAAAA,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR,CATS,CAS2B;AACvC,GAZL,EAaKV,KAbL,CAaWC,GAAG,IACVN,QAAQ,CAAC;AACLO,IAAAA,IAAI,EAAEb,UADD;AAELc,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFjB,GAAD,CAdZ;AAmBC,CApBE,C,CAqBH;;AACA,OAAO,MAAMM,cAAc,GAAGD,OAAO,IAAI;AACzC,SAAO;AACHR,IAAAA,IAAI,EAAEZ,gBADH;AAEHa,IAAAA,OAAO,EAAEO;AAFN,GAAP;AAIC,CALM,C,CAMP;;AACA,OAAO,MAAME,cAAc,GAAG,MAAM;AACpC,SAAO;AACHV,IAAAA,IAAI,EAAEX;AADH,GAAP;AAGC,CAJM,C,CAKP;;AACA,OAAO,MAAMsB,UAAU,GAAG,MAAMlB,QAAQ,IAAI;AAE5Ca,EAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB,EAF4C,CAEI;;AAEhD3B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ4C,CAIhB;;AAE5BQ,EAAAA,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR,CAN4C,CAMP;AAEpC,CARM","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nimport {\n    GET_ERRORS,\n    SET_CURRENT_USER,\n    USER_LOADING\n} from \"./types\";\n// Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n    axios\n        .post(\"/api/users/register\", userData)\n        .then(res => history.push(\"/login\")) // re-direct to login on successful register\n        .catch(err =>\n        dispatch({\n            type: GET_ERRORS,\n            payload: err.response.data\n        })\n        );\n};\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n    axios\n        .post(\"/api/users/login\", userData)\n        .then(res => {\n\n            const { token } = res.data;             // Save to localStorage\n            localStorage.setItem(\"jwtToken\", token);    // Set token to localStorage\n            \n            setAuthToken(token);        // Set token to Auth header\n            \n            const decoded = jwt_decode(token);  // Decode token to get user data\n            \n            dispatch(setCurrentUser(decoded));  // Set current user\n        })\n        .catch(err =>\n        dispatch({\n            type: GET_ERRORS,\n            payload: err.response.data\n        })\n        );\n    };\n    // Set logged in user\n    export const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    };\n    };\n    // User loading\n    export const setUserLoading = () => {\n    return {\n        type: USER_LOADING\n    };\n    };\n    // Log user out\n    export const logoutUser = () => dispatch => {\n    \n    localStorage.removeItem(\"jwtToken\");            // Remove token from local storage\n    \n    setAuthToken(false);        // Remove auth header for future requests\n   \n    dispatch(setCurrentUser({}));        // Set current user to empty object {} which will set isAuthenticated to false\n    \n    };"]},"metadata":{},"sourceType":"module"}